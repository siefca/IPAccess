link:images/ipaccess_logo.png
= IP Access Control

<b>ipaccess version <tt>1.0.1</tt></b><br />
<b><tt>codename: Mother in Law</tt></b>

<br />

* http://ipaccess.rubyforge.org
* http://rubyforge.org/projects/ipaccess
* https://github.com/siefca/IPAccess/tree
* mailto:pw@gnu.org

== Description

This library provides classes for controlling IP access
in your programs. You can use it to build your own
routines checking IP addresses against access lists
or use altered sockets implementation with IP access
control enabled that also comes with this library.

== Features

* Maintaining IP access lists based on rules (see IPAccess::List).
* Grouping input/output access lists into sets (see IPAccess::Set).
* Automating access checks and raising exceptions (see IPAccess::Set#check_in).
* Many formats of IP addresses accepted (see IPAccess::List.obj_to_cidr).
* Variants of socket handling classes with IP access control (see IPAccess::Socket and IPAccess::Net).
* Methods for patching native socket handling classes (see IPAccess.arm).
* Methods for patching single network objects (see IPAccess.arm).
* Bases on the library NetAddr[http://netaddr.rubyforge.org/] and uses trees to store data.

== What's in the bag?

There are two classes used to evaluate IP access:
IPAccess::List and IPAccess::Set. First class maintains
a list of rules and methods for checking whether
given IP matches them. Second class is more general –
it throws exceptions and distinguishes between
incoming and outgoing IP traffic. That's because
it maintains two access lists.

The classes described above do not interfere
with any network classes and/or objects unless
you code them to do that. However, this library
also provides special variants of socket handling
classes that use IPAccess::Set instances to control
access of the real TCP/IP traffic in an easy way.

== Synopsis

	# load patched sockets
	require 'ipaccess/socket'

	# assume IP given by untrusted user
	ip_from_user = '192.168.5.5'

	# create new access set
	acl = IPAccess::Set.new
	
	# blacklist private and local subnets
	acl.output.block :private, :local
	
	# create TCP socket with IP access control
	socket = IPAccess::TCPSocket(ip_from_user, 80, acl)

== Requirements

* netaddr[http://netaddr.rubyforge.org/]
* rake[http://rake.rubyforge.org/]
* rubyforge[http://rubyforge.org/]
* rubygems[http://docs.rubygems.org/]

== Download

==== Source code

* https://github.com/siefca/IPAccess/tree
* <tt>git clone git://github.com/siefca/IPAccess.git</tt>

==== Gem

* http://rubyforge.org/projects/ipaccess

== Installation

* <tt>sudo gem install ipaccess</tt>

== More information

See IPAccess module's documentation for more information.

== License

Copyright (c) 2009 by Paweł Wilk.

\IPAccess is copyrighted software owned by Paweł Wilk (pw@gnu.org).
You may redistribute and/or modify this software as long as you
comply with either the terms of the LGPL (see the file {LGPL-LICENSE}[link:docs/LGPL-LICENSE.html]),
or Ruby's license (see the file {COPYING}[link:docs/COPYING.html]).

THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE.

