= IP Access Control

=== codename: <b><tt>Mother in Law</tt></b>

* http://ipaccess.rubyforge.org
* http://rubyforge.org/projects/ipaccess
* https://github.com/siefca/IPAccess/tree
* mailto:pw@gnu.org

== Description

This library provides classes for controlling IP access
in your programs. You can use it to build your own
routines checking IP addresses against access lists
or use altered sockets implementation with IP access
control enabled that also comes with this library.

There are two classes used to evaluate IP access:
IPAccessList and IPAccess. First class maintains
list of rules and methods for checking whether
IP matches them. Second class is more general –
it throws exceptions and distinguishes between
incoming and outgoing IP traffic using two lists.

Two major classes described above do not interfere
with any networking classes and/or objects unless
you code it to do that. However, this library
also contains special variants of socket handling
classes mentioned earlier that use IPAccess objects
to control access of real TCP/IP traffic in an easy way.

== Features

* manages white and black lists of IP rules
* maintains input and output access sets based on lists
* accepts many formats of IP addresses (strings, sockets, DNS and more)
* helps to automate access checks and raises exceptions
* allows to match and search of IP addresses in rules' lists and sets
* bases on nice library \NetAddr and uses trees to store data
* provides variants of socket handling classes with IP access control
* has special methods for patching native socket handling classes
* has special methods for patching single networking objects

== Synopsis

	require 'ipaccess/socket'			# load sockets subsystem

	ip_from_user = '192.168.5.5'		# IP given by untrusted user

	acl = IPAccess.new					# new access set
	acl.output.block :private, :local	# blacklisted private and local subnets
	
	socket = IPAccess::TCPSocket(ip_from_user, 80, acl)

== Requirements

* netaddr[http://netaddr.rubyforge.org/]
* rake[http://rake.rubyforge.org/]
* rubyforge[http://rubyforge.org/]
* rubygems[http://docs.rubygems.org/]

== Download

==== Source code

* https://github.com/siefca/IPAccess/tree
* <tt>git clone git://github.com/siefca/IPAccess.git</tt>

==== Gem

* http://rubyforge.org/projects/ipaccess

== Installation

* <tt>sudo gem install ipaccess</tt>

== Usage

=== Classes

==== Handling access sets and access lists

If you need just an IP access lists that you would handle in your own way
you may want to use two classes:

* IPAccess to maintain access sets (containing input and output access lists)
* IPAccessList to maintain single access list

==== Handling socket classes

If you want standard sockets to have access control enabled
you may want to use:

* IPAccess::Socket (or issue IPAccess.arm Socket)
* IPAccess::TCPSocket (or issue IPAccess.arm TCPSocket)
* IPAccess::UDPSocket (or issue IPAccess.arm UDPSocket)
* IPAccess::SOCKSocket (or issue IPAccess.arm SOCKSocket)
* IPAccess::TCPServer (or issue IPAccess.arm TCPServer)

Before using any of them you must issue:

* <tt>require 'ipaccess/socket'</tt>

Using the IPAccess.arm causes standard socket class to be altered,
while \IPAccess:: classes are just new variants of socket
handling classes.

==== Handling other supported networking classes

If you want some working objects to have access control enabled
you may want to use:

* IPAccess::Net::HTTP (or issue IPAccess.arm Net::HTTP)
* IPAccess::Net::Telnet (or issue IPAccess.arm Net::Telnet)

==== Handling single objects

If you want to enable access control for single networking
object from the list shown above you may issue:

	require 'ipaccess/net/http'
	obj = Net::HTTP.new(host, port)
	IPAccess.arm obj

or

	require 'ipaccess/socket'
	socket = IPAccess::TCPServer.new(31337)
	IPAccess.arm socket
	
..and so on.

=== Note about internal structures

IP addresses used by the classes are internaly and interfacialy
represented by NetAddr::CIDR[http://netaddr.rubyforge.org/classes/NetAddr/CIDR.html]
objects (NetAddr::CIDRv4[http://netaddr.rubyforge.org/classes/NetAddr/CIDRv4.html] and
NetAddr::CIDRv6[http://netaddr.rubyforge.org/classes/NetAddr/CIDRv6.html]). Due to
performance reasons any access list internally is represented as a tree
(NetAddr::Tree[http://netaddr.rubyforge.org/classes/NetAddr/Tree.html])
with special tags assigning rules to virtual lists.

=== Simple scenarios

If you don’t need to have some fancy access controlling
routines you may want to use access controlled sockets
provided by this library or patch Ruby's built-in
socket handling classes.

For your convenience such altered sockets may use
global, local or shared access sets. To get more
information about that see documentation for some
of them.

== License

Copyright (c) 2009 by Paweł Wilk.

\IPAccess is copyrighted software owned by Paweł Wilk (pw@gnu.org).
You may redistribute and/or modify this software as long as you
comply with either the terms of the LGPL (see the file {LGPL-LICENSE}[link:docs/LGPL-LICENSE.html]),
or Ruby's license (see the file {COPYING}[link:docs/COPYING.html]).

THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE.

