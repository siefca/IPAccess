= IP Access Control

=== codename: <b><tt>Mother in Law</tt></b>

* http://ipaccess.rubyforge.org
* http://rubyforge.org/projects/ipaccess
* https://github.com/siefca/IPAccess/tree
* mailto:pw@gnu.org

== Description

This library provides classes for controlling IP access
in your programs. You can use it to build your own
routines checking IP addresses against access lists
or use altered sockets implementation with IP access
control enabled that also comes with this library.

There are two classes used to evaluate IP access:
IPAccessList and IPAccess. First class maintains
list of rules and methods for checking whether
IP matches them. Second class is more general –
it throws exceptions and distinguishes between
incoming and outgoing IP traffic using two lists.

Two major classes described above do not interfere
with any networking classes and/or objects unless
you code it to do that. However, this library
also contains special variants of socket handling
classes mentioned earlier that use IPAccess objects
to control access of real TCP/IP traffic in an easy way.

== Features

* manages white and black lists of IP rules
* maintains input and output access sets based on lists
* accepts many formats of IP addresses (strings, sockets, DNS and more)
* helps to automate access checks and raises exceptions
* allows to match and search of IP addresses in rules' lists and sets
* provides variants of socket handling classes with IP access control
* has special methods for patching native socket handling classes
* is based on nice library \NetAddr and uses trees to store data

== Synopsis

	require 'ipaccess/socket'			# load sockets subsystem

	ip_from_user = '192.168.5.5'		# IP given by untrusted user

	acl = IPAccess.new			# new access set
	acl.output.block :private, :local	# blacklisted private and local subnets
	
	socket = IPAccess::TCPSocket(ip_from_user, 80, acl)

== Requirements

* netaddr[http://netaddr.rubyforge.org/]
* rake[http://rake.rubyforge.org/]
* rubyforge[http://rubyforge.org/]
* rubygems[http://docs.rubygems.org/]

== Download

==== Source code

* https://github.com/siefca/IPAccess/tree
* <tt>git clone git://github.com/siefca/IPAccess.git</tt>

==== Gem

* http://rubyforge.org/projects/ipaccess

== Installation

* <tt>sudo gem install ipaccess</tt>

== Internals

=== Structures

IP addresses used by the classes are internaly and interfacialy
represented by NetAddr::CIDR[http://netaddr.rubyforge.org/classes/NetAddr/CIDR.html]
objects (NetAddr::CIDRv4[http://netaddr.rubyforge.org/classes/NetAddr/CIDRv4.html] and
NetAddr::CIDRv6[http://netaddr.rubyforge.org/classes/NetAddr/CIDRv6.html]). Due to
performance reasons any access list internally is represented as a tree
(NetAddr::Tree[http://netaddr.rubyforge.org/classes/NetAddr/Tree.html])
with special tags assigning rules to virtual lists.

=== Simple scenarios

If you don’t need to have some fancy access controlling
routines you may want to use access controlled sockets
provided by this library or patch Ruby's built-in
socket handling classes.

For your convenience such altered sockets may use
global, local or shared access sets. To get more
information about that see documentation for some
of them.

==== Using \IPAccess sockets

Here are subclasses of Ruby's socket handling classes
that will do the job:

* IPAccess::Socket
* IPAccess::TCPSocket
* IPAccess::SOCKSSocket
* IPAccess::UDPSocket
* IPAccess::TCPServer

Before using any of them you must issue:

* <tt>require 'ipaccess/socket'</tt>

==== Patching Ruby Sockets

If there is no other way to control access than to
alter the whole sockets subsystem you may use \IPAccess
library to patch native socket handling classes of Ruby.
To do that use special class method called IPAccess.arm

Before using IPAccess.arm you must load it using:

* <tt>require 'ipaccess/socket'</tt>

== License

Copyright (c) 2009 by Paweł Wilk.

\IPAccess is copyrighted software owned by Paweł Wilk (pw@gnu.org).
You may redistribute and/or modify this software as long as you
comply with either the terms of the LGPL (see the file {LGPL-LICENSE}[link:docs/LGPL-LICENSE.html]),
or Ruby's license (see the file {COPYING}[link:docs/COPYING.html]).

THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE.

