= IP Access Control

<b>ipaccess version <tt>1.0.1 (Mother in Law)</tt></b>

* http://ipaccess.rubyforge.org
* http://rubyforge.org/projects/ipaccess
* https://github.com/siefca/IPAccess/tree
* mailto:pw@gnu.org

== Description

This library provides classes for controlling IP access
in your programs. You can use it to build your own
routines checking IP addresses against access lists
or use altered sockets implementation with IP access
control enabled that also comes with this library.

There are two classes used to evaluate IP access:
IPAccessList and IPAccess. First class maintains
a list of rules and methods for checking whether
IP matches them. Second class is more general –
it throws exceptions and distinguishes between
incoming and outgoing IP traffic using two lists.

The two classes described above do not interfere
with any network classes and/or objects unless
you code them to do that. However, this library
also provides special variants of socket handling
classes that use IPAccess objects to control
access of the real TCP/IP traffic in an easy way.

== Basic Features

* It's easy to use.
* Manages browsable white and black lists of IP rules (see IPAccess).
* Maintains input and output access sets based on lists (see IPAccessList).
* Helps to automate access checks and raises exceptions (see IPAccess#check_in).

== Other Features

* Understands many formats of IP addresses (see IPAccessList.obj_to_cidr).
* Provides variants of socket handling classes with IP access control (see IPAccess::Socket).
* Has methods for patching native socket handling classes (see IPAccess.arm).
* Has methods for patching single network objects (see IPAccess.arm).
* Bases on the library NetAddr[http://netaddr.rubyforge.org/] and uses trees to store data.

== Synopsis

	# load patched sockets
	require 'ipaccess/socket'

	# assume IP given by untrusted user
	ip_from_user = '192.168.5.5'

	# create new access set
	acl = IPAccess.new
	
	# blacklist private and local subnets
	acl.output.block :private, :local
	
	# create TCP socket with IP access control
	socket = IPAccess::TCPSocket(ip_from_user, 80, acl)

== Requirements

* netaddr[http://netaddr.rubyforge.org/]
* rake[http://rake.rubyforge.org/]
* rubyforge[http://rubyforge.org/]
* rubygems[http://docs.rubygems.org/]

== Download

==== Source code

* https://github.com/siefca/IPAccess/tree
* <tt>git clone git://github.com/siefca/IPAccess.git</tt>

==== Gem

* http://rubyforge.org/projects/ipaccess

== Installation

* <tt>sudo gem install ipaccess</tt>

== Usage

=== Handling access sets and access lists

If you need just an IP access lists that you will handle in your own way
you may want to use two classes:

* IPAccess to maintain access sets (containing input and output access lists),
* IPAccessList to maintain single access list.

=== Using socket classes

If you want standard sockets to have access control enabled
you may want to use:

* IPAccess::Socket (or issue <tt>IPAccess.arm Socket</tt>)
* IPAccess::TCPSocket (or issue <tt>IPAccess.arm TCPSocket</tt>)
* IPAccess::UDPSocket (or issue <tt>IPAccess.arm UDPSocket</tt>)
* IPAccess::SOCKSocket (or issue <tt>IPAccess.arm SOCKSocket</tt>)
* IPAccess::TCPServer (or issue <tt>IPAccess.arm TCPServer</tt>)

Before using any of them you must issue:

* <tt>require 'ipaccess/socket'</tt>

Using the IPAccess.arm causes standard socket class to be altered,
while \IPAccess:: classes are just new variants of socket
handling classes.

==== Using other supported network classes

If you want some working objects to have access control enabled
you may want to use:

* IPAccess::Net::Telnet (or issue <tt>IPAccess.arm Net::Telnet</tt>)
* IPAccess::Net::HTTP (or issue <tt>IPAccess.arm Net::HTTP</tt>)
* IPAccess::Net::FTP (or issue <tt>IPAccess.arm Net::FTP</tt>)
* IPAccess::Net::POP3 (or issue <tt>IPAccess.arm Net::POP3</tt>)
* IPAccess::Net::IMAP (or issue <tt>IPAccess.arm Net::IMAP</tt>)
* IPAccess::Net::SMTP (or issue <tt>IPAccess.arm Net::SMTP</tt>)

==== Using single network objects

If you want to enable access control for single network
object from the list shown above you may issue:

	require 'ipaccess/net/http'
	obj = Net::HTTP.new(host, port)
	IPAccess.arm obj

or

	require 'ipaccess/socket'
	socket = IPAccess::TCPServer.new(31337)
	IPAccess.arm socket
	
..and so on.

=== Note about internal structures

IP addresses used by the classes are internaly and interfacialy
represented by NetAddr::CIDR[http://netaddr.rubyforge.org/classes/NetAddr/CIDR.html]
objects (NetAddr::CIDRv4[http://netaddr.rubyforge.org/classes/NetAddr/CIDRv4.html] and
NetAddr::CIDRv6[http://netaddr.rubyforge.org/classes/NetAddr/CIDRv6.html]). Due to
performance reasons any access list internally is represented as a tree
(NetAddr::Tree[http://netaddr.rubyforge.org/classes/NetAddr/Tree.html])
with special tags assigning rules to virtual lists.

== License

Copyright (c) 2009 by Paweł Wilk.

\IPAccess is copyrighted software owned by Paweł Wilk (pw@gnu.org).
You may redistribute and/or modify this software as long as you
comply with either the terms of the LGPL (see the file {LGPL-LICENSE}[link:docs/LGPL-LICENSE.html]),
or Ruby's license (see the file {COPYING}[link:docs/COPYING.html]).

THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE.

