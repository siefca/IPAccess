Access checks are lazy,
which means they are performed when
a real connection is going to happend.

Instances of this class will also
internally use patched versions of Ruby's network
socket objects to avoid access leaks.

You can pass access set in various ways: while
creating a new object or while a communication is
already started. You can also rely on a global
access set, which is used by default.

=== Usage

There are 3 ways to enable access control:

* by patching original class (see IPAccess.arm) – use it in code that you cannot modify
* by patching single instance (see IPAccess.arm) – use it occasionally
* by using instances of this class directly – use it in your own code

There are also 4 ways to manage access rules:

* by using direct methods like blacklist and whitelist – preferred
* by using +acl+ member – low-level
* by using <tt>IPAccess::Set.Global</tt> constant – controls a global access set
* by using methods of an external IPAccess::Set object associated with an instance

==== Using direct methods

Patched network objects and variants have methods to control access.
You should use them since they are most reliable way to perform
modifications on an working instance. These methods (documented
below) are: whitelist, blacklist, whitelist! and blacklist!.
Each of the methods ensures that needed safety checks are made
when detecting some change in access lists.

==== Using +acl+ member

The +acl+ member gives you direct access to internal IPAccess::Set
instance that an object uses to control an access. However,
by accessing this member you may only modify private and shared
access sets, and you have to manually re-check connection against lists
(e.g. by using method acl_recheck).

==== Using IPAccess::Set.Global

You may use IPAccess::Set.Global to add or remove rules
conatined in lists of a global access set. You should use
it before some network objects are created and if it's not
possible call acl_recheck for any object that is using it
when some changes in rules are made. It is also possible
to manipulate global access set from object's scope using
whitelist! and blacklist! methods. For working
objects you should use them.

==== Using external access set

External access sets are simply IPAccess::Set objects
that were associated with an instance during initialization
or by assigning it to +acl+ member. You may manipulate their
access rules safely before a networking object is in
a connected state. After it happens it is safer to use
direct controlling methods that network object provides.

